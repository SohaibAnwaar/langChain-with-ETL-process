from sqlalchemy import create_engine, Column, String, Integer, Boolean, JSON, Text, Float, Date, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship

Base = declarative_base()

class Advisor(Base):
    __tablename__ = 'advisors'
    id = Column(Integer, primary_key=True)
    crd = Column(Integer)
    npn = Column(Float)
    first_name = Column(String)
    middle_name = Column(String)
    last_name = Column(String)
    other_names = Column(Text)
    team = Column(Float)
    broker_dealer = Column(String)
    broker_dealer_crd = Column(String)
    years_with_current_bd = Column(String)
    current_bd_start_date = Column(String)
    ria = Column(String)
    ria_crd = Column(String)
    years_with_current_ria = Column(String)
    current_ria_state_date = Column(String)
    address = Column(String)
    city = Column(String)
    state = Column(String)
    zip = Column(String)
    metro_area = Column(String)
    licenses_exams = Column(String)
    title = Column(String)
    designations = Column(String)
    phone = Column(String)
    phone_type = Column(String)
    linkedin = Column(String)
    email_1 = Column(String)
    email_2 = Column(String)
    email_3 = Column(String)
    personal_email = Column(String)
    bio = Column(String)
    years_of_experience = Column(Integer)
    est_age = Column(Float)
    previous_broker_dealer = Column(String)
    previous_ria = Column(String)
    gender = Column(String)
    team_id = Column(Integer)
    person_tag_role = Column(Float)
    person_tag_family = Column(String)
    person_tag_hobbies = Column(String)
    person_tag_expertise = Column(Float)
    person_tag_services = Column(String)
    person_tag_investments = Column(Float)
    person_tag_sports_teams = Column(String)
    person_tag_school = Column(String)
    person_tag_greek_life = Column(String)
    person_tag_military_status = Column(String)
    person_tag_faith_based_investing = Column(String)
    firm_tag_platform = Column(String)
    firm_tag_technology = Column(String)
    firm_tag_services = Column(String)
    firm_tag_investments = Column(String)
    firm_tag_custodian = Column(String)
    firm_tag_clients = Column(Float)
    firm_tag_crm = Column(String)
    notes = Column(Float)
    profile = Column(String)
    sec_link = Column(String)
    finra_link = Column(String)
    firm_company_name = Column(String)
    firm_type = Column(String)
    firm_address = Column(String)
    firm_city = Column(String)
    firm_state = Column(String)
    firm_zip = Column(String)
    firm_phone = Column(String)
    firm_aum = Column(Integer)
    firm_total_accounts = Column(Integer)
    firm_custodians = Column(String)
    firm_total_employees = Column(Float)
    firm_ria_reps = Column(Integer)
    firm_bd_reps = Column(Float)
    firm_form_13f = Column(String)
    lines = Column(Float)
    carrier = Column(Float)
    company = Column(Float)
    initial_appointment_date = Column(Float)
    captive = Column(Float)
    num_of_carriers = Column(Float)
    num_of_lines = Column(Float)
    non_producing = Column(Float)
    insurance_years_of_experience = Column(Float)
    
    # Relationships
    broker_check_data = relationship("BrokerCheckData", back_populates="advisor", uselist=False)
    linkedin_profile = relationship("LinkedInProfile", back_populates="advisor", uselist=False)

class BrokerCheckData(Base):
    __tablename__ = 'brokercheck_data'
    id = Column(Integer, primary_key=True)
    advisor_id = Column(Integer, ForeignKey('advisors.id'))
    disclosures = Column(JSON)
    timeline = Column(JSON)
    exams = Column(JSON)
    state_registrations = Column(JSON)
    sro_registrations = Column(JSON)
    current_registrations = Column(JSON)
    previous_registrations = Column(JSON)

    advisor = relationship("Advisor", back_populates="broker_check_data")


class LinkedInProfile(Base):
    __tablename__ = 'linkedin_profiles'

    urn = Column(String, primary_key=True)
    advisor_id = Column(Integer, ForeignKey('advisors.id'))
    username = Column(String)
    firstName = Column(String)
    lastName = Column(String)
    isCreator = Column(Boolean)
    isOpenToWork = Column(Boolean)
    isHiring = Column(Boolean)
    profilePicture = Column(String)
    backgroundImage = Column(JSON)
    summary = Column(Text)
    headline = Column(String)
    geo = Column(JSON)
    languages = Column(JSON)
    educations = Column(JSON)
    position = Column(JSON)
    fullPositions = Column(JSON)
    skills = Column(JSON)
    courses = Column(JSON)
    certifications = Column(JSON)
    honors = Column(JSON)
    projects = Column(JSON)
    volunteering = Column(JSON)

    advisor = relationship("Advisor", back_populates="linkedin_profile")